import logging
from io import StringIO

logger = logging.getLogger(__name__)

NEO_TO_UNICODE = [
    0x25a0, 0x03b4, 0x0394, 0x222b, 0x0143, 0x0133, 0x274f, 0x2154,
    0x02d9, 0x21e5, 0x2193, 0x2191, 0x2913, 0x21b5, 0x2908, 0x2909,
    0x2192, 0x2153, 0x039e, 0x03b1, 0x03c1, 0x2195, 0x21a9, 0x25a1,
    0x221a, 0x2264, 0x2265, 0x03b8, 0x221e, 0x03a9, 0x03b2, 0x03a3,
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
    0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
    0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
    0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x2190,
    0x20ac, 0xac, 0x201a, 0x0192, 0x201e, 0x2026, 0x2020, 0x2021,
    0x02c6, 0x2030, 0x0160, 0x2039, 0x0152, 0x03a6, 0x017d, 0x03a0,
    0x2035, 0x2018, 0x2019, 0x201c, 0x201d, 0x2022, 0x2013, 0x2014,
    0x02dc, 0x2122, 0x0161, 0x203a, 0x0153, 0x03c0, 0x017e, 0x0178,
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
    0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
    0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
    0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
    0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff]

tab_code = 9
newline_code = 10
return_code = 13


def export_text(text):  # from device to host
    index = 0
    result = ''
    while index < len(text):
        code = text[index]
        index = index + 1
        if code == 0xa4: continue  # unused code
        if code == 0xa7: continue  # unused code
        if code == 0x09: code = tab_code  # pass code through the character set translation
        if code == 0x0a: code = newline_code  # pass code through the character set translation
        if code == 0x0d: code = newline_code  # pass code through the character set translation
        if code == 0x81: code = 0x20  # line-breaking space
        if code == 0x8d: code = tab_code  # line-breaking tab
        if code == 0x8f: continue  # period break in a run of contiguous characters
        if code == 0xa1: code = 0x20  # line-breaking space (older software versions)
        if code == 0xa3: code = tab_code  # line-breaking tab (older software versions)
        if code == 0xad: code = 0x2d  # line-breaking hyphen
        if code == 0xb0:
            if len(text) - index < 2:
                logger.error('ASAlphaWordText: Unexpectedly truncated escape sequence')
            else:
                index = index + 1
                code = text[index]  # get the interpreted code directly
                if code == 0xb0:
                    index = index + 1  # skip over a following escape code (if present)
        if 0xa1 <= code <= 0xbf:
            logger.error('ASAlphaWordText: possibly untrapped escape', code)
            continue
        needs_conversion = code not in [tab_code, newline_code, return_code]
        if needs_conversion:
            code = NEO_TO_UNICODE[code]
        result = result + chr(code)
    return result
